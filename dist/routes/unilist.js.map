{"version":3,"sources":["../../src/routes/unilist.js"],"names":["MongoClient","require","router","express","Router","url","dbName","get","req","res","connect","useNewUrlParser","err","client","db","collection","aggregate","$project","name","us_state","toArray","results","json","close","post","data","body","category","axios","undergradcgpa","univarbal","uniquant","intjournal","intconference","natjournal","natconference","research_experience","job_experience","then","response","console","log","class","catch","error","start","end","dept","major","sort","query","$gt","$lt","$match","$limit","$sort","docs","length","Uni","find","RegExp","limit","list","status","errors","tempdata","Name","$in"],"mappings":"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","file":"unilist.js","sourcesContent":["import express from \"express\";\nconst MongoClient = require('mongodb').MongoClient;\nimport axios from 'axios';\nimport Uni from \"../models/Uni\";\nimport User from \"../models/User\";\nimport parseErrors from \"../utils/parseErrors\";\nimport authenticate from \"../middlewares/authenticate\";\nimport { throws } from \"assert\";\n\nconst router = express.Router();\n\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'hsa';\nrouter.get(\"/insights\", (req, res) => {\n\n\n    MongoClient.connect(url, { useNewUrlParser: true }, function (err, client) {\n        if (err) {\n            throw err;\n        } else {\n\n            const db = client.db(dbName);\n            const collection = db.collection('admittedStudents');\n            collection.aggregate(\n                [\n                    { \"$sort\": { \"us_state\": 1 } },\n                    { $project: { name: 1, us_state: 1 } },\n                    {\n                        \"$group\": {\n                            \"_id\": \"$us_state\",\n                            \"count\": { \"$sum\": 1 }\n                        }\n                    }\n                ]).toArray(function (err, results) {\n                    if (err) throw err;\n                    res.json(results)\n                }\n                )\n\n\n        }\n        client.close();\n    });\n\n\n\n\n});\n\nrouter.post(\"/recommend\", (req, res) => {\n\n    const data = req.body.data;\n    // console.log(data.undergradcgpa, 'RECOMMEND DATA')\n    // get category from py API\n\n\n    let category;\n    axios.post('http://ec2-18-222-28-1.us-east-2.compute.amazonaws.com:5000', {\n        \"bd_cgpa\": data.undergradcgpa,\n        \"gre_verbal\": data.univarbal,\n        \"gre_quant\": data.uniquant,\n        \"intjournal\": data.intjournal,\n        \"intconference\": data.intconference,\n        \"natjournal\": data.natjournal,\n        \"natconference\": data.natconference,\n        \"research_experience\": data.research_experience,\n        \"job_experience\": data.job_experience,\n    })\n        .then(function (response) {\n            console.log('classssss', response.data);\n            category = response.data.class;\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n\n    category = category || 1\n    let start, end;\n\n    switch (category) {\n        case 1:\n            start = 0;\n            end = 20;\n            break;\n        case 2:\n            start = 20;\n            end = 40;\n            break;\n        case 3:\n            start = 40;\n            end = 60;\n            break;\n        case 4:\n            start = 60;\n            end = 100;\n            break;\n        case 5:\n            start = 100;\n            end = 200;\n            break;\n        case 6:\n            start = 200;\n            end = 900;\n            break;\n\n        default:\n            break;\n    }\n\n\n    MongoClient.connect(url, { useNewUrlParser: true }, function (err, client) {\n        if (err) {\n            res.json({ err: err });\n        } else {\n\n            const db = client.db(dbName);\n            const collection = db.collection('universities');\n\n            let dept = data.major || 'Engr'\n            var sort = {};\n            sort[dept] = 1\n            sort['HasBDAlumni'] = -1\n            var query = {};\n            query[dept] = { $gt: start, $lt: end };\n\n            collection.aggregate([\n                { $match: query },\n                { $limit: 15 },\n                { $sort: sort }\n            ]).toArray(function (err, docs) {\n                if (err) res.json({ err: 'Something went wrong on database' });\n                if (docs.length < 5) {\n                    dept = 'Engr'\n                    sort[dept] = 1\n                    var query = {};\n                    query[dept] = { $gt: start, $lt: end };\n                    collection.aggregate([\n                        { $match: query },\n                        { $limit: 15 },\n                        { $sort: sort }\n                    ]).toArray(function (err, docs) {\n                        if (err) res.json({ err: 'Something went wrong on database' });\n                        res.json({ docs: docs, dept: dept })\n                        client.close();\n                    });\n                } else {\n                    res.json({ docs: docs, dept: dept })\n                    client.close();\n                }\n\n            });\n\n\n        }\n\n    });\n\n\n\n});\nrouter.post(\"/bd\", (req, res) => {\n    const data = req.body.data;\n\n\n    Uni.find({ name: new RegExp(data, 'i') }).limit(10).then(list => {\n        res.json(list)\n    }).catch(err => res.status(400).json({ errors: parseErrors(err.errors) }));\n});\n\n\n\nrouter.post(\"/selected_uni_list\", (req, res) => {\n    const data = req.body.data;\n    let tempdata = ['Abilene Christian University']\n    MongoClient.connect(url, { useNewUrlParser: true }, function (err, client) {\n        if (err) {\n            throw err\n        } else {\n\n            const db = client.db(dbName);\n            const collection = db.collection('universities');\n\n            collection.find({ Name: { $in: tempdata } }).toArray(function (err, docs) {\n                if (err) {\n                    res.json({ err: err })\n                } else {\n                    res.json({ docs: docs })\n                }\n                client.close();\n            });\n\n        }\n\n    });\n});\n\n\nexport default router;\n"]}