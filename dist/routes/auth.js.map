{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","express","Router","post","req","res","credentials","body","User","findOne","email","then","user","isValidPassword","password","json","toAuthJSON","status","errors","global","token","findOneAndUpdate","confirmationToken","confirmed","new","jwt","verify","process","env","JWT_SECRET","err","data","decoded","_id","setPassword","save"],"mappings":"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","file":"auth.js","sourcesContent":["import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport User from \"../models/User\";\nimport { sendResetPasswordEmail } from \"../mailer\";\n\nconst router = express.Router();\n\nrouter.post(\"/\", (req, res) => {\n  const { credentials } = req.body;\n  User.findOne({ email: credentials.email }).then(user => {\n    if (user && user.isValidPassword(credentials.password)) {\n      res.json({ user: user.toAuthJSON() });\n    } else {\n      res.status(400).json({ errors: { global: \"Invalid credentials\" } });\n    }\n  });\n});\n\nrouter.post(\"/confirmation\", (req, res) => {\n  const token = req.body.token;\n  User.findOneAndUpdate(\n    { confirmationToken: token },\n    { confirmationToken: \"\", confirmed: true },\n    { new: true }\n  ).then(\n    user =>\n      user ? res.json({ user: user.toAuthJSON() }) : res.status(400).json({})\n  );\n});\n\nrouter.post(\"/reset_password_request\", (req, res) => {\n  User.findOne({ email: req.body.email }).then(user => {\n    if (user) {\n      sendResetPasswordEmail(user);\n      res.json({});\n    } else {\n      res\n        .status(400)\n        .json({ errors: { global: \"There is no user with such email\" } });\n    }\n  });\n});\n\nrouter.post(\"/validate_token\", (req, res) => {\n  jwt.verify(req.body.token, process.env.JWT_SECRET, err => {\n    if (err) {\n      res.status(401).json({});\n    } else {\n      res.json({});\n    }\n  });\n});\n\nrouter.post(\"/reset_password\", (req, res) => {\n  const { password, token } = req.body.data;\n  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n    if (err) {\n      res.status(401).json({ errors: { global: \"Invalid token\" } });\n    } else {\n      User.findOne({ _id: decoded._id }).then(user => {\n        if (user) {\n          user.setPassword(password);\n          user.save().then(() => res.json({}));\n        } else {\n          res.status(404).json({ errors: { global: \"Invalid token\" } });\n        }\n      });\n    }\n  });\n});\n\nexport default router;\n"]}